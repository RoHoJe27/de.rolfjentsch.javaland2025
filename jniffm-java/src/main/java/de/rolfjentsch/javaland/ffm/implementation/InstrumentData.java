// Generated by jextract

package de.rolfjentsch.javaland.ffm.implementation;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     const char *instId;
 *     const char *instName;
 *     unsigned int instType;
 *     double maxVolume;
 * }
 * }
 */
public class InstrumentData {

    InstrumentData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        api_h.C_POINTER.withName("instId"),
        api_h.C_POINTER.withName("instName"),
        api_h.C_INT.withName("instType"),
        MemoryLayout.paddingLayout(4),
        api_h.C_DOUBLE.withName("maxVolume")
    ).withName("$anon$34:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout instId$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("instId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *instId
     * }
     */
    public static final AddressLayout instId$layout() {
        return instId$LAYOUT;
    }

    private static final long instId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *instId
     * }
     */
    public static final long instId$offset() {
        return instId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *instId
     * }
     */
    public static MemorySegment instId(MemorySegment struct) {
        return struct.get(instId$LAYOUT, instId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *instId
     * }
     */
    public static void instId(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(instId$LAYOUT, instId$OFFSET, fieldValue);
    }

    private static final AddressLayout instName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("instName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *instName
     * }
     */
    public static final AddressLayout instName$layout() {
        return instName$LAYOUT;
    }

    private static final long instName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *instName
     * }
     */
    public static final long instName$offset() {
        return instName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *instName
     * }
     */
    public static MemorySegment instName(MemorySegment struct) {
        return struct.get(instName$LAYOUT, instName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *instName
     * }
     */
    public static void instName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(instName$LAYOUT, instName$OFFSET, fieldValue);
    }

    private static final OfInt instType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("instType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int instType
     * }
     */
    public static final OfInt instType$layout() {
        return instType$LAYOUT;
    }

    private static final long instType$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int instType
     * }
     */
    public static final long instType$offset() {
        return instType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int instType
     * }
     */
    public static int instType(MemorySegment struct) {
        return struct.get(instType$LAYOUT, instType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int instType
     * }
     */
    public static void instType(MemorySegment struct, int fieldValue) {
        struct.set(instType$LAYOUT, instType$OFFSET, fieldValue);
    }

    private static final OfDouble maxVolume$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("maxVolume"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double maxVolume
     * }
     */
    public static final OfDouble maxVolume$layout() {
        return maxVolume$LAYOUT;
    }

    private static final long maxVolume$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double maxVolume
     * }
     */
    public static final long maxVolume$offset() {
        return maxVolume$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double maxVolume
     * }
     */
    public static double maxVolume(MemorySegment struct) {
        return struct.get(maxVolume$LAYOUT, maxVolume$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double maxVolume
     * }
     */
    public static void maxVolume(MemorySegment struct, double fieldValue) {
        struct.set(maxVolume$LAYOUT, maxVolume$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

