// Generated by jextract

package de.rolfjentsch.javaland.ffm.implementation;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class api_h {

    api_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("api"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int INVALID_API_HANDLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define INVALID_API_HANDLE 0
     * }
     */
    public static int INVALID_API_HANDLE() {
        return INVALID_API_HANDLE;
    }
    private static final int API_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define API_OK 0
     * }
     */
    public static int API_OK() {
        return API_OK;
    }
    private static final int API_ERR_INVALID_HANDLE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define API_ERR_INVALID_HANDLE 1
     * }
     */
    public static int API_ERR_INVALID_HANDLE() {
        return API_ERR_INVALID_HANDLE;
    }
    private static final int API_ERR_PARAM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define API_ERR_PARAM 2
     * }
     */
    public static int API_ERR_PARAM() {
        return API_ERR_PARAM;
    }
    private static final int API_ERR_MAX_HANDLE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define API_ERR_MAX_HANDLE 3
     * }
     */
    public static int API_ERR_MAX_HANDLE() {
        return API_ERR_MAX_HANDLE;
    }
    private static final int API_ERR_INTERNAL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define API_ERR_INTERNAL 4
     * }
     */
    public static int API_ERR_INTERNAL() {
        return API_ERR_INTERNAL;
    }
    private static final int API_ERR_NO_CB_REGISTERED = (int)5L;
    /**
     * {@snippet lang=c :
     * #define API_ERR_NO_CB_REGISTERED 5
     * }
     */
    public static int API_ERR_NO_CB_REGISTERED() {
        return API_ERR_NO_CB_REGISTERED;
    }
    private static final int API_ERR_INVALID_USER_PW = (int)6L;
    /**
     * {@snippet lang=c :
     * #define API_ERR_INVALID_USER_PW 6
     * }
     */
    public static int API_ERR_INVALID_USER_PW() {
        return API_ERR_INVALID_USER_PW;
    }
    private static final int CB_STATUS_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CB_STATUS_OK 0
     * }
     */
    public static int CB_STATUS_OK() {
        return CB_STATUS_OK;
    }
    private static final int CB_STATUS_MAXDATA = (int)100L;
    /**
     * {@snippet lang=c :
     * #define CB_STATUS_MAXDATA 100
     * }
     */
    public static int CB_STATUS_MAXDATA() {
        return CB_STATUS_MAXDATA;
    }
    private static final int CB_STATUS_NODATA = (int)101L;
    /**
     * {@snippet lang=c :
     * #define CB_STATUS_NODATA 101
     * }
     */
    public static int CB_STATUS_NODATA() {
        return CB_STATUS_NODATA;
    }
    private static final int CB_STATUS_INSTEXIST = (int)102L;
    /**
     * {@snippet lang=c :
     * #define CB_STATUS_INSTEXIST 102
     * }
     */
    public static int CB_STATUS_INSTEXIST() {
        return CB_STATUS_INSTEXIST;
    }
    /**
     * {@snippet lang=c :
     * typedef int API_HANDLE
     * }
     */
    public static final OfInt API_HANDLE = api_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int API_RESULT
     * }
     */
    public static final OfInt API_RESULT = api_h.C_INT;

    private static class getApiVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            api_h.C_POINTER,
            api_h.C_POINTER,
            api_h.C_POINTER
        );

        public static final MemorySegment ADDR = api_h.findOrThrow("getApiVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void getApiVersion(int *major, int *minor, int *release)
     * }
     */
    public static FunctionDescriptor getApiVersion$descriptor() {
        return getApiVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void getApiVersion(int *major, int *minor, int *release)
     * }
     */
    public static MethodHandle getApiVersion$handle() {
        return getApiVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void getApiVersion(int *major, int *minor, int *release)
     * }
     */
    public static MemorySegment getApiVersion$address() {
        return getApiVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void getApiVersion(int *major, int *minor, int *release)
     * }
     */
    public static void getApiVersion(MemorySegment major, MemorySegment minor, MemorySegment release) {
        var mh$ = getApiVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getApiVersion", major, minor, release);
            }
            mh$.invokeExact(major, minor, release);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getLastErrorCode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            api_h.C_INT    );

        public static final MemorySegment ADDR = api_h.findOrThrow("getLastErrorCode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getLastErrorCode()
     * }
     */
    public static FunctionDescriptor getLastErrorCode$descriptor() {
        return getLastErrorCode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getLastErrorCode()
     * }
     */
    public static MethodHandle getLastErrorCode$handle() {
        return getLastErrorCode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getLastErrorCode()
     * }
     */
    public static MemorySegment getLastErrorCode$address() {
        return getLastErrorCode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getLastErrorCode()
     * }
     */
    public static int getLastErrorCode() {
        var mh$ = getLastErrorCode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getLastErrorCode");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getErrorMessage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            api_h.C_POINTER,
            api_h.C_INT
        );

        public static final MemorySegment ADDR = api_h.findOrThrow("getErrorMessage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *getErrorMessage(int errorCode)
     * }
     */
    public static FunctionDescriptor getErrorMessage$descriptor() {
        return getErrorMessage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *getErrorMessage(int errorCode)
     * }
     */
    public static MethodHandle getErrorMessage$handle() {
        return getErrorMessage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *getErrorMessage(int errorCode)
     * }
     */
    public static MemorySegment getErrorMessage$address() {
        return getErrorMessage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *getErrorMessage(int errorCode)
     * }
     */
    public static MemorySegment getErrorMessage(int errorCode) {
        var mh$ = getErrorMessage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getErrorMessage", errorCode);
            }
            return (MemorySegment)mh$.invokeExact(errorCode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class createHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            api_h.C_INT,
            api_h.C_POINTER,
            api_h.C_POINTER
        );

        public static final MemorySegment ADDR = api_h.findOrThrow("createHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * API_HANDLE createHandle(signed char *user, signed char *pw)
     * }
     */
    public static FunctionDescriptor createHandle$descriptor() {
        return createHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * API_HANDLE createHandle(signed char *user, signed char *pw)
     * }
     */
    public static MethodHandle createHandle$handle() {
        return createHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * API_HANDLE createHandle(signed char *user, signed char *pw)
     * }
     */
    public static MemorySegment createHandle$address() {
        return createHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * API_HANDLE createHandle(signed char *user, signed char *pw)
     * }
     */
    public static int createHandle(MemorySegment user, MemorySegment pw) {
        var mh$ = createHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("createHandle", user, pw);
            }
            return (int)mh$.invokeExact(user, pw);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class registerStatusCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            api_h.C_INT,
            api_h.C_INT,
            api_h.C_POINTER
        );

        public static final MemorySegment ADDR = api_h.findOrThrow("registerStatusCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * API_RESULT registerStatusCallback(API_HANDLE handle, ApiStatusCb callback)
     * }
     */
    public static FunctionDescriptor registerStatusCallback$descriptor() {
        return registerStatusCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * API_RESULT registerStatusCallback(API_HANDLE handle, ApiStatusCb callback)
     * }
     */
    public static MethodHandle registerStatusCallback$handle() {
        return registerStatusCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * API_RESULT registerStatusCallback(API_HANDLE handle, ApiStatusCb callback)
     * }
     */
    public static MemorySegment registerStatusCallback$address() {
        return registerStatusCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * API_RESULT registerStatusCallback(API_HANDLE handle, ApiStatusCb callback)
     * }
     */
    public static int registerStatusCallback(int handle, MemorySegment callback) {
        var mh$ = registerStatusCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("registerStatusCallback", handle, callback);
            }
            return (int)mh$.invokeExact(handle, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class registerInstrumentCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            api_h.C_INT,
            api_h.C_INT,
            api_h.C_POINTER
        );

        public static final MemorySegment ADDR = api_h.findOrThrow("registerInstrumentCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * API_RESULT registerInstrumentCallback(API_HANDLE handle, InstrumentCb callback)
     * }
     */
    public static FunctionDescriptor registerInstrumentCallback$descriptor() {
        return registerInstrumentCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * API_RESULT registerInstrumentCallback(API_HANDLE handle, InstrumentCb callback)
     * }
     */
    public static MethodHandle registerInstrumentCallback$handle() {
        return registerInstrumentCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * API_RESULT registerInstrumentCallback(API_HANDLE handle, InstrumentCb callback)
     * }
     */
    public static MemorySegment registerInstrumentCallback$address() {
        return registerInstrumentCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * API_RESULT registerInstrumentCallback(API_HANDLE handle, InstrumentCb callback)
     * }
     */
    public static int registerInstrumentCallback(int handle, MemorySegment callback) {
        var mh$ = registerInstrumentCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("registerInstrumentCallback", handle, callback);
            }
            return (int)mh$.invokeExact(handle, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class instrumentCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            api_h.C_INT,
            api_h.C_INT,
            api_h.C_POINTER,
            api_h.C_POINTER,
            api_h.C_INT,
            api_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = api_h.findOrThrow("instrumentCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * API_RESULT instrumentCreate(API_HANDLE h, const char *instId, const char *instName, unsigned int instType, double maxVolume)
     * }
     */
    public static FunctionDescriptor instrumentCreate$descriptor() {
        return instrumentCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * API_RESULT instrumentCreate(API_HANDLE h, const char *instId, const char *instName, unsigned int instType, double maxVolume)
     * }
     */
    public static MethodHandle instrumentCreate$handle() {
        return instrumentCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * API_RESULT instrumentCreate(API_HANDLE h, const char *instId, const char *instName, unsigned int instType, double maxVolume)
     * }
     */
    public static MemorySegment instrumentCreate$address() {
        return instrumentCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * API_RESULT instrumentCreate(API_HANDLE h, const char *instId, const char *instName, unsigned int instType, double maxVolume)
     * }
     */
    public static int instrumentCreate(int h, MemorySegment instId, MemorySegment instName, int instType, double maxVolume) {
        var mh$ = instrumentCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("instrumentCreate", h, instId, instName, instType, maxVolume);
            }
            return (int)mh$.invokeExact(h, instId, instName, instType, maxVolume);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class instrumentUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            api_h.C_INT,
            api_h.C_INT,
            api_h.C_POINTER,
            api_h.C_POINTER,
            api_h.C_INT,
            api_h.C_INT,
            api_h.C_INT,
            api_h.C_DOUBLE,
            api_h.C_INT
        );

        public static final MemorySegment ADDR = api_h.findOrThrow("instrumentUpdate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * API_RESULT instrumentUpdate(API_HANDLE h, const char *instId, const char *instName, int instNameFilled, unsigned int instType, int instTypeFilled, double maxVolume, int maxVolumeFilled)
     * }
     */
    public static FunctionDescriptor instrumentUpdate$descriptor() {
        return instrumentUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * API_RESULT instrumentUpdate(API_HANDLE h, const char *instId, const char *instName, int instNameFilled, unsigned int instType, int instTypeFilled, double maxVolume, int maxVolumeFilled)
     * }
     */
    public static MethodHandle instrumentUpdate$handle() {
        return instrumentUpdate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * API_RESULT instrumentUpdate(API_HANDLE h, const char *instId, const char *instName, int instNameFilled, unsigned int instType, int instTypeFilled, double maxVolume, int maxVolumeFilled)
     * }
     */
    public static MemorySegment instrumentUpdate$address() {
        return instrumentUpdate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * API_RESULT instrumentUpdate(API_HANDLE h, const char *instId, const char *instName, int instNameFilled, unsigned int instType, int instTypeFilled, double maxVolume, int maxVolumeFilled)
     * }
     */
    public static int instrumentUpdate(int h, MemorySegment instId, MemorySegment instName, int instNameFilled, int instType, int instTypeFilled, double maxVolume, int maxVolumeFilled) {
        var mh$ = instrumentUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("instrumentUpdate", h, instId, instName, instNameFilled, instType, instTypeFilled, maxVolume, maxVolumeFilled);
            }
            return (int)mh$.invokeExact(h, instId, instName, instNameFilled, instType, instTypeFilled, maxVolume, maxVolumeFilled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class instrumentRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            api_h.C_INT,
            api_h.C_INT,
            api_h.C_POINTER
        );

        public static final MemorySegment ADDR = api_h.findOrThrow("instrumentRead");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * API_RESULT instrumentRead(API_HANDLE h, const char *instId)
     * }
     */
    public static FunctionDescriptor instrumentRead$descriptor() {
        return instrumentRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * API_RESULT instrumentRead(API_HANDLE h, const char *instId)
     * }
     */
    public static MethodHandle instrumentRead$handle() {
        return instrumentRead.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * API_RESULT instrumentRead(API_HANDLE h, const char *instId)
     * }
     */
    public static MemorySegment instrumentRead$address() {
        return instrumentRead.ADDR;
    }

    /**
     * {@snippet lang=c :
     * API_RESULT instrumentRead(API_HANDLE h, const char *instId)
     * }
     */
    public static int instrumentRead(int h, MemorySegment instId) {
        var mh$ = instrumentRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("instrumentRead", h, instId);
            }
            return (int)mh$.invokeExact(h, instId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class instrumentDelete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            api_h.C_INT,
            api_h.C_INT,
            api_h.C_POINTER
        );

        public static final MemorySegment ADDR = api_h.findOrThrow("instrumentDelete");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * API_RESULT instrumentDelete(API_HANDLE h, const char *instId)
     * }
     */
    public static FunctionDescriptor instrumentDelete$descriptor() {
        return instrumentDelete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * API_RESULT instrumentDelete(API_HANDLE h, const char *instId)
     * }
     */
    public static MethodHandle instrumentDelete$handle() {
        return instrumentDelete.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * API_RESULT instrumentDelete(API_HANDLE h, const char *instId)
     * }
     */
    public static MemorySegment instrumentDelete$address() {
        return instrumentDelete.ADDR;
    }

    /**
     * {@snippet lang=c :
     * API_RESULT instrumentDelete(API_HANDLE h, const char *instId)
     * }
     */
    public static int instrumentDelete(int h, MemorySegment instId) {
        var mh$ = instrumentDelete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("instrumentDelete", h, instId);
            }
            return (int)mh$.invokeExact(h, instId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = api_h.findOrThrow("reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void reset()
     * }
     */
    public static FunctionDescriptor reset$descriptor() {
        return reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void reset()
     * }
     */
    public static MethodHandle reset$handle() {
        return reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void reset()
     * }
     */
    public static MemorySegment reset$address() {
        return reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void reset()
     * }
     */
    public static void reset() {
        var mh$ = reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("reset");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

